#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Dandelion
#+DATE: <2017-03-15 qua>
#+AUTHOR: Fabio Machado
#+EMAIL: fabio@fabio-Vostro-5470
#+LANGUAGE: en
#+SELECT_TAGS: export
#+CREATOR: Emacs 24.5.1 (Org mode 9.0.3)
#+EXCLUDE_TAGS: noexport

* Introduction
This package presents a method for coding and decoding k-Trees from strings
called Generalized Dandelion Code.

It is an implemetentation of the algorithm describe in Camintini's et. al. paper
[[https://www.researchgate.net/publication/225969891_Bijective_Linear_Time_Coding_and_Decoding_for_k-Trees][Bijective Linear Coding and Decoding for k-Trees]].

* Tasks
** DONE Project skeleton for k-Trees Sampling
   CLOSED: [2017-03-15 qua 20:15]
** DONE Define the Dandelion Code class
   CLOSED: [2017-03-15 qua 21:28]
** DONE Validate the Dandelion Code 
   CLOSED: [2017-03-15 qua 21:42]

* Modules
** dandelion
#+BEGIN_SRC python :tangle dandelion/dandelion.py
  """Defines the Dandelion class"""

  class Dandelion:
      """The Dandelion code"""

      # The code itself. Each i-th element of the array is a set containing the
      # parent of the i-th node and its edge label in the characteristic tree.
      code = [];

      #The number of variables in the k-Tree
      N = None;

      def validateCode(code):
          """Check if the code is well formed"""

          #Assert types
          assert isinstance(code, list);
          for t in code:
              assert isinstance(t, tuple);

          #Assert number of elements according to N
          assert len(code) == self.N - 2

          return True;

      def __init__(self, code=None):
          """Initializes the code. An already existing code can be passed too."""
          if code is not None:
              try:
                  self.validateCode(code);
              except AssertionError:
                  return "Invalid code";

              self.code = code;
              self.N = len(code) + 2;

  def main():
      """Parses command line arguments"""
      return None

  if __name__ == "__main__":
      main()
#+END_SRC

** __init__
#+BEGIN_SRC python :tangle dandelion/__init__.py
  """A bijective linear time coding and decoding for k-trees

  This package presents a method for coding and decoding k-Trees from strings
  called Generalized Dandelion Code.

  It is an implemetentation of the algorithm describe in Camintini's et. al.
  paper
  [[https://www.researchgate.net/publication/225969891_Bijective_Linear_Time_Coding_and_Decoding_for_k-Trees][Bijective
  Linear Coding and Decoding for k-Trees]].

  """
  __version__ = '0.1'
#+END_SRC

#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Dandelion
#+DATE: <2017-03-15 qua>
#+AUTHOR: Fabio Machado
#+EMAIL: fabiohsmachado@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+CREATOR: Emacs 24.5.1 (Org mode 9.0.3)
#+EXCLUDE_TAGS: noexport
#+PROPERTY: header-args:python :session *Python*
#+PROPERTY: header-args :results output

This package presents a method for coding and decoding k-Trees from strings
called Generalized Dandelion Codes. It is an implementation of the algorithm
describe in Camintini's et. al. paper [[https://www.researchgate.net/publication/225969891_Bijective_Linear_Time_Coding_and_Decoding_for_k-Trees][Bijective Linear Coding and Decoding for
k-Trees]].

This documentation assumes familiarity with the mentioned paper.

For the examples here we'll be considering a kTree of $$N = 11$$ variables and $$k = 3$$.
#+BEGIN_SRC python
  import numpy as np
  import networkx as nx

  from dandelion.main import Dandelion
  
  N = 11; #Number of variables
  k = 3; #Width of the graph
#+END_SRC

* Code and kTree Structures
  The kTree is represented using [[https://networkx.github.io/][NetworkX's]] Graph class.
#+BEGIN_SRC python
  kTree = nx.Graph();
  kTree.add_nodes_from([i for i in np.arange(N)]);
  kTree.add_edges_from([(1,2),(1,8),(1,5),(1,7),
                        (2,5),(2,6),(2,8),(2,3),(2,11),(2,9),(2,10),
                        (3,8),(3,5),(3,9),(3,4),(3,10),(3,11),
                        (4,9),(4,11),
                        (5,7),(5,8),
                        (6,9),(6,8),
                        (7,8),
                        (8,9),
                        (9,10),(9,11)])
#+END_SRC

#+RESULTS:

The Dandelion code is an Array of Tuples. The i-th Tuple has the information
about the parent of the i-th node and it's edge's label on the characteristic
tree. The \epsilon edge label in represented as the value $$-1$$.
#+BEGIN_SRC python
  validCode = [(0, -1), (2, 1), (8, 3), (8, 2), (1, 3), (5, 3)]; #OK
  invalidCode = [(0, -1), (0, 2), 4, [1, 3]] #NOK, has an int and an array instead of Tuples in its elements
#+END_SRC

#+RESULTS:

To code or decode a k-Tree an instance of the Dandelion class must be created.
When instantiating the class the number of variables $$N$$ and the width of the
$$k$$ tree must be provided.

In case of coding a kTree must be provided. Either at construction time or later
by setting the "kTree" attribute to a valid kTree. It validates if the kTree
provided is an instance of networkx's Graph class.

#+BEGIN_SRC python
  dandelionCode = Dandelion(N, k, kTree=kTree); #OK. It is a well formed tree
  try:
      dandelionCode = Dandelion(N, k, kTree=[1, 20, 300]); #NOK. The kTree provided is not an instance of nx.Graph
  except AssertionError:
      print("Error");
#+END_SRC

#+RESULTS:
: 
: ... ... ... ... Error

In case of decoding a code must also be provided at construction time or later
by setting the "code" attribute to a valid code. If a wrong code (bad forming or
wrong length according to N or k) is provided, an Exception is raised.

#+BEGIN_SRC python
  dandelionCode = Dandelion(11, 3, code=validCode); #OK, code provided at construction
  dandelionCode = Dandelion(11, 3); #OK, empty structure
  try:
      dandelionCode.code = invalidCode; #NOK, raises AssertionError exception
  except AssertionError:
      print("Error");
#+END_SRC

#+RESULTS:
: 
: >>> ... ... ... ... Error

* Coding and Decoding
** Decoding a k-Tree

** Coding a k-Tree

* Todo
** TODO Create the Code Method
** TODO Create the Decode Method
** TODO [#C] Change code from list no np.Array 
** TODO Tests [1/1] 
*** DONE Validation [4/4]
    CLOSED: [2017-03-16 qui 00:03]
    - [X] Good code
    - [X] Bad code: wrong format
    - [X] Bad code: wrong length
    - [X] kTrees
